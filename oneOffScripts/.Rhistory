View(Potholes)
Potholes <- d %>%
filter(Service.Type == "DPW-Pothole") %>%
group_by(Date)
View(Potholes)
Potholes <- d %>%
filter(Service.Type == "DPW-Pothole") %>%
group_by(Date) %>%
summarize(count=n())
Potholes <- d %>%
filter(Service.Type == "DPW-Pothole") %>%
group_by(Date) %>%
summarize(count=n())
Potholes <- d %>%
filter(Service.Type == "DPW-Pothole") %>%
group_by(Date) %>%
summarise(n = n())
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# The FTP site was created by Ahmod at Intelligov
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Write it to the K drive
# write.csv(d, "K:/Somerstat/Common/Data/2015_Constituent_Services/data/Daily.csv")
# Remove everything else
remove(f, url, x)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
today <- Sys.Date()
yesterday <- today - 1
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$DaysAgo <- difftime(d$Date, today, units = "days")
Potholes <- d %>%
filter(Service.Type == "DPW-Pothole") %>%
group_by(Date) %>%
summarise(n = n())
View(Potholes)
# Remove everything else
remove(f)
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
# dates
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
d$Service.Type
Potholes <- d %>%
filter(Service.Type == 'DPW-Pothole') %>%
group_by(Year.Month) %>%
summarize(count=n())
View(Potholes)
View(Potholes)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line(stat = "identity", colour="white", fill=nice_blue) +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line()
ggplot(Potholes, aes(x=Year.Month, y=count group = 1)) +
geom_line()
ggplot(Potholes, aes(x=Year.Month, y=count group = 1)) +
geom_line()
ggplot(Potholes, aes(x=Year.Month, y=count group = 1)) +
geom_line() +
my.theme + ggtitle(paste("Top Work Orders From Yesterday:", yesterday)) + xlab("Request") +
ylab("# of Requests") +
scale_y_continuous(labels = comma)
ggplot(Potholes, aes(x=Year.Month, y=count group = 1)) +
geom_line(colour=lime_green, size = 2)
ggplot(Potholes, aes(x=Year.Month, y=count group = 1)) +
geom_line(colour=lime_green, size = 2) +
my.theme + ggtitle("Grammy Award Categories Over Time") + xlab("Year") +
ylab("Grammy Awards Per Year") +
scale_y_continuous(labels = comma)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line(colour=lime_green, size = 2)
ggplot(Potholes, aes(x=Potholes$Year.Month, y=Potholes$count)) +
geom_line(colour=lime_green, size = 2)
ggplot(Potholes, aes(x=Year.Month, y=count))
View(Potholes)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line(colour=lime_green, size = 2)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_bar()
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_bar
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line(colour=lime_green, size = 2)
summarise(Potholes$count)
summary(Potholes$count)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line(colour=lime_green, size = 2) +
my.theme + ggtitle("Grammy Award Categories Over Time") + xlab("Year") +
ylab("Grammy Awards Per Year") +
scale_y_continuous(labels = comma)
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# The FTP site was created by Ahmod at Intelligov
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Write it to the K drive
# write.csv(d, "K:/Somerstat/Common/Data/2015_Constituent_Services/data/Daily.csv")
# Remove everything else
remove(f)
# dates
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
#### analysis ####
# Potholes
Potholes <- d %>%
filter(Service.Type == 'DPW-Pothole') %>%
group_by(Year.Month) %>%
summarize(count=n())
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line(colour=lime_green, size = 2)
Potholes$Year.Month <- as.character(Potholes$Year.Month)
ggplot(Potholes, aes(x=Year.Month, y=count)) +
geom_line(colour=lime_green, size = 2)
Potholes$Year.Month <- as.character(Potholes$Year.Month)
Potholes$Year.Month
ggplot(Potholes, aes(x=Year.Month, y=count, group = 1)) +
geom_line(colour=lime_green, size = 2)
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
#### analysis ####
# Potholes
Potholes <- d %>%
filter(Service.Type == 'DPW-Pothole') %>%
group_by(Year.Month) %>%
summarize(count=n())
ggplot(Potholes, aes(x=Year.Month, y=count, group = 1)) +
geom_line(colour=lime_green, size = 2) +
my.theme + ggtitle("Potholes Over Time") + xlab("Year-Month") +
ylab("count") +
scale_y_continuous(labels = comma)
ggsave("./plots/Potholes.png", dpi=300, width=5, height=5)
Potholes <- d %>%
filter(Service.Type == 'DPW-Pothole') %>%
group_by(Year.Month) %>%
summarize(count=n())
ggplot(Potholes, aes(x=Year.Month, y=count, group = 1)) +
geom_line(colour=lime_green, size = 1.5) +
my.theme + ggtitle("Potholes Over Time") + xlab("Year-Month") +
ylab("count") +
scale_y_continuous(labels = comma)
ggsave("./plots/Potholes.png", dpi=300, width=7, height=5)
Potholes <- d %>%
filter(Service.Type == 'DPW-Pothole')
Potholes$Citizen.Name
tnp <- read.csv("C:/Users/dhadley/Desktop/tnp.csv")
View(tnp)
d <- read.csv("C:/Users/dhadley/Desktop/tnp.csv")
View(d)
d$Date.of.Transaction <- as.Date(d$Date.of.Transaction)
First <- d %>%
group_by(Client.ID)
View(First)
First <- d %>%
group_by(Client.ID) %>%
gather(Client.ID, "n")
View(First)
d <- read.csv("C:/Users/dhadley/Desktop/tnp.csv")
library(dplyr)
library(tidyr)
d$Date.of.Transaction <- as.Date(d$Date.of.Transaction)
First <- d %>%
group_by(Client.ID)
View(d)
First <- d %>%
select(Client.ID, Date.of.Transaction)
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
summarise(min = min(Date.of.Transaction))
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction)
summary(d$Date.of.Transaction)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
summarise(min = min(Date.of.Transaction))
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
summarise(test = min(Date.of.Transaction))
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction)
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
summarise(test = min(Date.of.Transaction))
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
spread(Client.ID)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
spread(Client.ID, Date.of.Transaction)
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
spread(Date.of.Transaction)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
spread(Date.of.Transaction, Client.ID)
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
spread(Date.of.Transaction, test, Client.ID)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
spread(Date.of.Transaction, Client.ID) %>%
gather(Client.ID, "n")
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
spread(Date.of.Transaction, n)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
summarise(test = min(Date.of.Transaction))
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
group_by(Client.ID) %>%
summarise(test = min(Date.of.Transaction))
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
group_by(Client.ID) %>%
summarise(test = max(Date.of.Transaction))
View(First)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
group_by(Client.ID) %>%
summarise(test = min(Date.of.Transaction))
View(First)
test <- d %>%
select(Client.ID = 13730)
test <- d %>%
select(Client.ID = '13730')
test <- d %>%
select(Client.ID == '13730')
View(test)
View(First)
test <- d %>%
select(Client.ID == '25459  ')
test <- d %>%
select(Client.ID == '25459')
d$Client.ID
summary(d$Client.ID)
test <- d %>%
select(Client.ID = 25459)
test <- d %>%
filter(Client.ID = 25459)
test <- d %>%
filter(Client.ID == 25459)
View(test)
View(First)
test <- d %>%
filter(Client.ID == 13730)
View(test)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
group_by(Client.ID) %>%
summarise(test = min(Date.of.Transaction, na.rm = T))
View(First)
d <- read.csv("C:/Users/dhadley/Desktop/tnp.csv")
library(dplyr)
library(tidyr)
d$Date.of.Transaction <- as.Date(d$Date.of.Transaction)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
group_by(Client.ID) %>%
summarise(test = min(Date.of.Transaction, na.rm = T))
View(First)
d$Date.of.Transaction <- as.Date(d$Date.of.Transaction)
First <- d %>%
select(Client.ID, Date.of.Transaction) %>%
group_by(Client.ID) %>%
summarise(test = min(Date.of.Transaction))
View(First)
View(First)
test <- d %>%
filter(Client.ID == 52339)
View(test)
#### Created 10/14 by Daniel Hadley to load and analyze 311 Data ####
# The FTP site was created by Ahmod at Intelligov
# working Directory and packages #
setwd("c:/Users/dhadley/Documents/GitHub/2015_Constituent_Services")
library(RCurl)
library(dplyr)
library(ggplot2)
library(scales) # for changing from scientific notation
library(tidyr)
# Read it
# I had problems with the encoding, so I added the f <- file
# http://stackoverflow.com/questions/4806823/how-to-detect-the-right-encoding-for-read-csv
f <- file('./data/Daily.csv', open="r", encoding="UTF-16LE")
# Turn it into a dataframe
# At first I got an error, so I added the fill=TRUE
# http://stackoverflow.com/questions/18161009/error-in-reading-in-data-set-in-r
d <- read.table(f, sep=',', dec='.', header=TRUE, fill = TRUE)
# Write it to the K drive
# write.csv(d, "K:/Somerstat/Common/Data/2015_Constituent_Services/data/Daily.csv")
# Remove everything else
remove(f)
# dates
d$Date <- as.Date(d$Date, "%m/%d/%Y")
d$Year.Month <- format(d$Date, '%Y-%m')
d$Month <- format(d$Date, '%m')
d$Year <- format(d$Date, '%Y')
####  Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
View(d)
View(d)
First <- d %>%
group_by(Service.Type) %>%
summarise(test = min(Date)
)
View(First)
First <- d %>%
group_by(Service.Type) %>%
summarise(test = min(Date)) %>%
arrange(Date)
First <- d %>%
group_by(Service.Type) %>%
summarise(FirstDate = min(Date)) %>%
arrange(FirstDate)
View(First)
setwd("C:/Users/dhadley/Documents/GitHub/rmR/oneOffScripts/")
library(lubridate)
library(tidyr)
library(dplyr)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
d <- read.csv("../data/Chicago_rats.csv")
tail(d)
#### K-means ####
# This is how we group crimes on a map.
# It may be more convenient to use reporting areas, but often those bisect a cluster
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(15)
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude)
View(clust)
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(15)
library(lubridate)
library(tidyr)
library(dplyr)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
library(randomForest)
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(15)
is.na(clust)
summary(clust$Latitude)
summary(clust$Longitude)
View(clust)
na.omit(clust)
g <- na.omit(d)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
# NAs throw off clustering
# http://stackoverflow.com/questions/11254524/omit-rows-containing-specific-column-of-na
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
d <- d %>%
completeFun(d, Latitude, Longitude)
d <- d %>%
completeFun(d, Latitude)
d <-  completeFun(d, Latitude)
View(d)
d <-  completeFun(d, "Latitude")
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(15)
# Add cluster variable back to the data frame
c <- augment(clust, d) %>% select(.cluster)
c$order <- d$order
d <- merge(d, c, by='order')
d <- d  %>% tbl_df() %>% mutate(cluster = .cluster) #the ."var name" throws off some functions
remove(c)
c <- augment(clust, d) %>% select(.cluster)
View(d)
View(c)
d$clust <- augment(clust, d) %>% select(.cluster)
View(d)
c <- augment(clust, d) %>% select(.cluster)
View(d)
