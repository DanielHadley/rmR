axis.title.x = theme_blank(),
axis.title.y = theme_blank(),
axis.ticks = theme_blank(),
strip.background = theme_blank(),
strip.text.y = theme_blank()
#strip.text.y = theme_text(size = 7, colour = "red", angle = 90)
)
s + facet_grid(Alarm ~.) + geom_line()
Week = c(rep(1:8,4))
Total = rnorm(32,1000,600)
Alarm = c(  rep("BELTWEIGHER HIGH HIGH",8),
rep("MICROWAVE LHS",8),
rep("HI PRESS FILTER 2 CLOG SW",8),
rep("LOW PRESS FILTER 2 CLOG SW",8))        )
spark <- data.frame(Week, Alarm, Total)
library(ggplot2)
s <- ggplot(spark, aes(Week, Total)) +
opts(
panel.background = theme_rect(size = 1, colour = "lightgray"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
axis.line = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.title.x = theme_blank(),
axis.title.y = theme_blank(),
axis.ticks = theme_blank(),
strip.background = theme_blank(),
strip.text.y = theme_blank()
#strip.text.y = theme_text(size = 7, colour = "red", angle = 90)
)
s + facet_grid(Alarm ~.) + geom_line()
spark <- data.frame(Week, Alarm, Total)
Alarm = c(  rep("BELTWEIGHER HIGH HIGH",8),
rep("MICROWAVE LHS",8),
rep("HI PRESS FILTER 2 CLOG SW",8),
rep("LOW PRESS FILTER 2 CLOG SW",8))        )
Week = c(rep(1:8,4))
Total = rnorm(32,1000,600)
Alarm = c(  rep("BELTWEIGHER HIGH HIGH",8),
rep("MICROWAVE LHS",8),
rep("HI PRESS FILTER 2 CLOG SW",8),
rep("LOW PRESS FILTER 2 CLOG SW",8))
spark <- data.frame(Week, Alarm, Total)
s <- ggplot(spark, aes(Week, Total)) +
opts(
panel.background = theme_rect(size = 1, colour = "lightgray"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
axis.line = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.title.x = theme_blank(),
axis.title.y = theme_blank(),
axis.ticks = theme_blank(),
strip.background = theme_blank(),
strip.text.y = theme_blank()
#strip.text.y = theme_text(size = 7, colour = "red", angle = 90)
)
s + facet_grid(Alarm ~.) + geom_line()
s <- ggplot(spark, aes(Week, Total)) +
theme(
panel.background = theme_rect(size = 1, colour = "lightgray"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
axis.line = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.title.x = theme_blank(),
axis.title.y = theme_blank(),
axis.ticks = theme_blank(),
strip.background = theme_blank(),
strip.text.y = theme_blank()
#strip.text.y = theme_text(size = 7, colour = "red", angle = 90)
)
s + facet_grid(Alarm ~.) + geom_line()
s <- ggplot(spark, aes(Week, Total))
+
theme(
panel.background = theme_rect(size = 1, colour = "lightgray"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
axis.line = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.title.x = theme_blank(),
axis.title.y = theme_blank(),
axis.ticks = theme_blank(),
strip.background = theme_blank()
)
s <- ggplot(spark, aes(Week, Total)) +
theme(
panel.background = element_rect(size = 1, colour = "lightgray"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
axis.line = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.title.x = theme_blank(),
axis.title.y = theme_blank(),
axis.ticks = theme_blank(),
strip.background = theme_blank(),
strip.text.y = theme_blank()
#strip.text.y = theme_text(size = 7, colour = "red", angle = 90)
)
s <- ggplot(spark, aes(Week, Total)) +
theme(
panel.background = element_rect(size = 1, colour = "lightgray"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank()
#strip.text.y = element_text(size = 7, colour = "red", angle = 90)
)
s + facet_grid(Alarm ~.) + geom_line()
s
s <- ggplot(spark, aes(Week, Total)) +
theme(
panel.background = element_rect(size = 1, colour = "lightgray"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank()
#strip.text.y = element_text(size = 7, colour = "red", angle = 90)
)
s + geom_line()
View(spark)
View(spark)
s + facet_grid(Alarm ~.) + geom_line()
s + facet_grid(Alarm ~.) + geom_line() + title(xlab = "test")
s <- ggplot(spark, aes(Week, Total)) +
title(xlab = "test") +
theme(
panel.background = element_rect(size = 1, colour = "lightgray"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank()
#strip.text.y = element_text(size = 7, colour = "red", angle = 90)
)
s + facet_grid(Alarm ~.) + geom_line()
getwd()
sparkLinePlot <- function(df, plot.file) {
highest <- subset(df, outcomes == max(outcomes))
lowest <- subset(df, outcomes == min(outcomes))
p <- ggplot(df, aes(x=date, y=outcomes)) +
geom_line() +
opts(panel.border = theme_rect(linetype = 0),
panel.background = theme_rect(colour = "white"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.ticks = theme_blank()) +
ylab("") +
geom_point(data = lowest, size = 3, colour = alpha("red", 0.5)) +
geom_point(data = highest, size = 3, colour = alpha("blue", 0.5)) +
scale_y_continuous(formatter = comma) +
scale_x_date(name = "", major="months", minor="weeks", format="%b-%d")
ggsave(file = paste(plot.file, ".svg", sep=""), width = 3, height = 2)
}
sparkLinePlot(spark, test)
setwd("/Users/dphnrome/Documents/Git/rmR/")
library(dplyr)
library(lubridate)
library(Cairo)
allData <- read.csv("./data/Chicago_rats.csv")
allData <- allData %>%
mutate(date = as.Date(allData$Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date))
View(allData)
d <- allData %>%
group_by(week) %>%
outcomes = (count(n))
# save a numeric vector containing 48 monthly observations
# from Jan 2009 to Dec 2014 as a time series object
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
# subset the time series (June 2014 to December 2014)
myts2 <- window(myts, start=c(2014, 6), end=c(2014, 12))
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
d <- allData %>%
group_by(year)
d <- allData %>%
group_by(year) %>%
summarise(outcomes = n())
sparkLinePlot <- function(df, plot.file) {
highest <- subset(df, outcomes == max(outcomes))
lowest <- subset(df, outcomes == min(outcomes))
p <- ggplot(df, aes(x=date, y=outcomes)) +
geom_line() +
opts(panel.border = theme_rect(linetype = 0),
panel.background = theme_rect(colour = "white"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.ticks = theme_blank()) +
ylab("") +
geom_point(data = lowest, size = 3, colour = alpha("red", 0.5)) +
geom_point(data = highest, size = 3, colour = alpha("blue", 0.5)) +
scale_y_continuous(formatter = comma) +
scale_x_date(name = "", major="months", minor="weeks", format="%b-%d")
ggsave(file = paste(plot.file, ".svg", sep=""), width = 3, height = 2)
}
sparkLinePlot(d, plot.file = test)
setwd("/Users/dphnrome/Documents/Git/rmR/")
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
# panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
days <- d %>%
group_by(Date) %>%
summarise(Events = n())
days <- d %>%
group_by(date) %>%
summarise(Events = n())
View(d)
d <- allData %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date))
days <- d %>%
group_by(date) %>%
summarise(Events = n())
allDays <- seq.Date(from=d$Date[1], to = d$Date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "Date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='Date', all=TRUE)
ts[is.na(ts)] <- 0
remove(allDays, days)
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "Date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='Date', all=TRUE)
ts[is.na(ts)] <- 0
ts = merge(days, allDays, by='date', all=TRUE)
days <- d %>%
group_by(date) %>%
summarise(Events = n())
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='date', all=TRUE)
ts[is.na(ts)] <- 0
remove(allDays, days)
ggplot(ts, aes(x=Date, y=Events)) +
geom_line(colour=my_color, size = .5) +
my.theme + ggtitle(paste(workOrder, "Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma)
ggplot(ts, aes(x=Date, y=Events)) +
geom_line(colour=black, size = .5) +
my.theme + ggtitle(paste(workOrder, "Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma)
ggplot(ts, aes(x=Date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle(paste(workOrder, "Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma)
ggplot(ts, aes(x=Date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma)
ggplot(ts, aes(x=Date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls")
View(ts)
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls")
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5)
my.theme <-
theme(plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
panel.grid.minor = element_blank(), # Remove more gridlines
panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
highest <- subset(ts, Events == max(Events))
lowest <- subset(ts, Events == min(Events))
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
scale_y_continuous(labels = comma) +
geom_point(data = lowest, size = 3, colour = alpha("red", 0.5)) +
geom_point(data = highest, size = 3, colour = alpha("blue", 0.5))
highest <- subset(ts, Events == max(Events))
lowest <- subset(ts, Events == min(Events))
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
geom_point(data = lowest, size = 3, colour = alpha("red", 0.5)) +
geom_point(data = highest, size = 3, colour = alpha("blue", 0.5))
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
geom_point(data = lowest, size = 3, colour = "red") +
geom_point(data = highest, size = 3, colour = "blue")
View(lowest)
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
# geom_point(data = lowest, size = 3, colour = "red") +
geom_point(data = highest, size = 3, colour = "blue")
geom_point(data = highest, size = 3, colour = "blue")
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
# geom_point(data = lowest, size = 3, colour = "red") +
geom_point(data = highest, size = 3, colour = "blue")
d <- allData %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date))
my.theme <-
theme(plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
panel.grid.minor = element_blank(), # Remove more gridlines
panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
#### Time Series ####
days <- d %>%
group_by(date) %>%
summarise(Events = n())
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='date', all=TRUE)
ts[is.na(ts)] <- 0
remove(allDays, days)
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
# geom_point(data = lowest, size = 3, colour = "red") +
geom_point(data = highest, size = 3, colour = "blue")
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls")
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time")) + xlab("Time") +
ylab("Daily Calls")
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time") + xlab("Time") +
ylab("Daily Calls")
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time") + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
# geom_point(data = lowest, size = 3, colour = "red") +
geom_point(data = highest, size = 3, colour = "blue")
today <- Sys.Date()
tenDaysAgo <- today - 10
d <- allData %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date)) %>%
filter(date >= tenDaysAgo) # last week
my.theme <-
theme(plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
panel.grid.minor = element_blank(), # Remove more gridlines
panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=6), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=12) # Enlarge, left-align title
,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
#### Time Series ####
days <- d %>%
group_by(date) %>%
summarise(Events = n())
View(days)
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='date', all=TRUE)
ts[is.na(ts)] <- 0
remove(allDays, days)
highest <- subset(ts, Events == max(Events))
lowest <- subset(ts, Events == min(Events))
View(lowest)
lowest <- subset(ts, Events == min(Events))
#### Time Series ####
days <- d %>%
group_by(date) %>%
summarise(Events = n())
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='date', all=TRUE)
ts[is.na(ts)] <- 0
remove(allDays, days)
highest <- subset(ts, Events == max(Events))
lowest <- subset(ts, Events == min(Events))
#### Time Series ####
days <- d %>%
group_by(date) %>%
summarise(Events = n())
d <- allData %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date)) %>%
filter(date >= tenDaysAgo)
View(d)
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "date"
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
View(d)
View(d)
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], by='days')
d$date[1]
d$date[nrow(d)]
d <- allData %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date)) %>%
filter(date >= tenDaysAgo)  %>%  # last week
arrange(date)
View(d)
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "date"
# After this we will have a df with every date and how many work orders
ts = merge(days, allDays, by='date', all=TRUE)
ts[is.na(ts)] <- 0
remove(allDays, days)
highest <- subset(ts, Events == max(Events))
lowest <- subset(ts, Events == min(Events))
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time") + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
# geom_point(data = lowest, size = 3, colour = "red") +
geom_point(data = highest, size = 3, colour = "blue")
ggplot(ts, aes(x=date, y=Events)) +
geom_line(colour="black", size = .5) +
my.theme + ggtitle("Rat Calls Over Time") + xlab("Time") +
ylab("Daily Calls") +
# scale_y_continuous(labels = comma) +
geom_point(data = lowest, size = 3, colour = "red") +
geom_point(data = highest, size = 3, colour = "blue")
View(highest)
higest <- highest[1:1,]
View(higest)
