}
colnames(c)[1] = "Events"
c <- c  %>% select(-Events) %>%
mutate(rowMeans(c))
colnames(c)[16] <- "AvgTwoWeeks"
c$id <- d$id
d = merge(d, c, by="id")
remove(c)
## Add some more time variables to improve prediction
d <- d %>%
mutate(monthDay = day(date),
weekDay = wday(date),
month = month(date),
year = year(date))
# To get the variables to build the model
# noquote(paste("lag_", 1:50," +", sep=''))
names(d)
# training <- filter(d, year=="2014")
# testing <- d  %>% filter(year=="2015")
training <- d[1:700,]
testing <- d[701:nrow(d),]
model <- randomForest(as.factor(Events) ~ lag_1 + lag_2 + lag_3 + lag_4 + lag_5 +
lag_6 + lag_7 + lag_8 + lag_9 + lag_10 +
AvgTwoWeeks + id + monthDay + weekDay +  month,
data=training, importance=TRUE, ntree=500, na.action = na.omit)
varImpPlot(model)
testing$EventsPredicted <- predict(model, testing)
results <- testing %>%
select(EventsPredicted, Events) %>%
# uncomment below if you do 'as.factor(Events)' in the model
# mutate(EventsPredicted = as.numeric(levels(EventsPredicted))[EventsPredicted]) %>%
# uncomment below if you take out the 'as.factor'
mutate(EventsPredicted = ifelse(EventsPredicted < .5, 0, 1)) %>%
mutate(falsePositive = ifelse(EventsPredicted > 0 & Events <= 0, "Yes", "No"),
falseNegative = ifelse(EventsPredicted <=0 & Events > 0, "Yes", "No"),
correct = ifelse(falsePositive == "Yes" | falseNegative == "Yes", "No", "Yes"))
prop.table(table(results$correct))
prop.table(table(results$Events))
pos <- filter(results, EventsPredicted > 0)
prop.table(table(pos$falsePositive))
neg <- filter(results, EventsPredicted == 0)
prop.table(table(neg$falseNegative))
results <- testing %>%
select(EventsPredicted, Events) %>%
# uncomment below if you do 'as.factor(Events)' in the model
mutate(EventsPredicted = as.numeric(levels(EventsPredicted))[EventsPredicted]) %>%
# uncomment below if you take out the 'as.factor'
# mutate(EventsPredicted = ifelse(EventsPredicted < .5, 0, 1)) %>%
mutate(falsePositive = ifelse(EventsPredicted > 0 & Events <= 0, "Yes", "No"),
falseNegative = ifelse(EventsPredicted <=0 & Events > 0, "Yes", "No"),
correct = ifelse(falsePositive == "Yes" | falseNegative == "Yes", "No", "Yes"))
prop.table(table(results$correct))
prop.table(table(results$Events))
pos <- filter(results, EventsPredicted > 0)
prop.table(table(pos$falsePositive))
neg <- filter(results, EventsPredicted == 0)
prop.table(table(neg$falseNegative))
comparison <- testing %>%
select(Events, AvgTwoWeeks) %>%
mutate(EventsPredicted = round(AvgTwoWeeks)) %>%
mutate(falsePositive = ifelse(EventsPredicted > 0 & Events <= 0, "Yes", "No"),
falseNegative = ifelse(EventsPredicted <=0 & Events > 0, "Yes", "No"),
correct = ifelse(falsePositive == "Yes" | falseNegative == "Yes", "No", "Yes"))
prop.table(table(comparison$correct))
prop.table(table(comparison$falsePositive))
prop.table(table(comparison$falseNegative))
setwd("/Users/dphnrome/Documents/Git/Predict_Crime/")
setwd("C:/Users/dhadley/Documents/GitHub/Predict_Crime")
library(lubridate)
library(tidyr)
library(dplyr)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
library(randomForest)
#### Boston data ####
# Import data from Socrata
# Using their api
# dBRaw <- read.csv(url(
#   "http://data.cityofboston.gov/resource/7cdf-6fgx.csv?$limit=
#   20000&incident_type_description=RESIDENTIAL%20BURGLARY"))
#
# # Write the dataset so I don't have to keep importing from Socrata
# dB <- dBRaw
# write.csv(dBRaw, file = "./data/bos.csv")
d <- read.csv("./data/bos.csv")
# Prepare to create x, y
d$Loc <- gsub("\\(", "", d$Location)
d$Loc <- gsub("\\)", "", d$Loc)
d <- d %>%
tbl_df()  %>% # Convert to tbl class - easier to examine than dfs
mutate(dateTime = mdy_hms(FROMDATE, tz='EST')) %>%
arrange(dateTime) %>%
separate(Loc, c("y", "x"), ",") %>%
mutate(x = as.numeric(x), y = as.numeric(y),
order = seq(1, nrow(d)))
# K means
# This is how we group crimes on a map.
# It may be more convenient to use reporting areas, but often those bisect a cluster
clust <- d %>%
ungroup %>% dplyr::select(x, y) %>% kmeans(15)
# Add cluster variable back to the data frame
c <- augment(clust, d) %>% select(.cluster)
c$order <- d$order
d <- merge(d, c, by='order')
d <- d  %>% tbl_df() %>% mutate(cluster = .cluster) #the ."var name" throws off some functions
remove(c)
#### Narrow it down to one cluster and start looking for patterns there #####
copy <- d
d <- filter(d, cluster == "6")
# Date, which I will use to group the observations
# And then combine them with all days in the sequence
# The goal is to be able to predict whether a BnE will occur on a given day
d$date <- as.Date(d$dateTime)
d$hour <- hour(d$dateTime)
days <- d %>%
group_by(date) %>%
summarise(Events = n())
allDays <- seq.Date(from=d$date[1], to = d$date[nrow(d)], b='days')
allDays <- allDays  %>%  as.data.frame()
colnames(allDays)[1] = "date"
# After this we will have a df with every date and how many BnEs
d = merge(days, allDays, by='date', all=TRUE)
d[is.na(d)] <- 0
remove(allDays, days)
d$id <- seq(1, nrow(d))
# Now get lag, which will probably be more predictive than time between last event(s)
c <- as.data.frame(d$Events)
for(i in 1:15){
c[[paste('lag', i, sep="_")]] <- lag(c[[i]])
}
colnames(c)[1] = "Events"
c <- c  %>% select(-Events) %>%
mutate(rowMeans(c))
colnames(c)[16] <- "AvgTwoWeeks"
c$id <- d$id
d = merge(d, c, by="id")
remove(c)
## Add some more time variables to improve prediction
d <- d %>%
mutate(monthDay = day(date),
weekDay = wday(date),
month = month(date),
year = year(date))
# To get the variables to build the model
# noquote(paste("lag_", 1:50," +", sep=''))
names(d)
# training <- filter(d, year=="2014")
# testing <- d  %>% filter(year=="2015")
training <- d[1:700,]
testing <- d[701:nrow(d),]
model <- randomForest(as.factor(Events) ~ lag_1 + lag_2 + lag_3 + lag_4 + lag_5 +
lag_6 + lag_7 + lag_8 + lag_9 + lag_10 +
AvgTwoWeeks + id + monthDay + weekDay +  month,
data=training, importance=TRUE, ntree=500, na.action = na.omit)
varImpPlot(model)
testing$EventsPredicted <- predict(model, testing)
results <- testing %>%
select(EventsPredicted, Events) %>%
# uncomment below if you do 'as.factor(Events)' in the model
mutate(EventsPredicted = as.numeric(levels(EventsPredicted))[EventsPredicted]) %>%
# uncomment below if you take out the 'as.factor'
# mutate(EventsPredicted = ifelse(EventsPredicted < .5, 0, 1)) %>%
mutate(falsePositive = ifelse(EventsPredicted > 0 & Events <= 0, "Yes", "No"),
falseNegative = ifelse(EventsPredicted <=0 & Events > 0, "Yes", "No"),
correct = ifelse(falsePositive == "Yes" | falseNegative == "Yes", "No", "Yes"))
prop.table(table(results$correct))
prop.table(table(results$Events))
pos <- filter(results, EventsPredicted > 0)
prop.table(table(pos$falsePositive))
neg <- filter(results, EventsPredicted == 0)
prop.table(table(neg$falseNegative))
comparison <- testing %>%
select(Events, AvgTwoWeeks) %>%
mutate(EventsPredicted = round(AvgTwoWeeks)) %>%
mutate(falsePositive = ifelse(EventsPredicted > 0 & Events <= 0, "Yes", "No"),
falseNegative = ifelse(EventsPredicted <=0 & Events > 0, "Yes", "No"),
correct = ifelse(falsePositive == "Yes" | falseNegative == "Yes", "No", "Yes"))
prop.table(table(comparison$correct))
prop.table(table(comparison$falsePositive))
prop.table(table(comparison$falseNegative))
View(testing)
# Dot map centered on Boston
map.center <- geocode("Dudley Square, Boston, MA")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=x, y=y, color=d$.cluster))
# Dot map centered on Boston
map.center <- geocode("Dorchester, Boston, MA")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=d, aes(x=x, y=y, color=d$.cluster, size=16))
# Dot map centered on Boston
map.center <- geocode("Dudley Square, Boston, MA")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=x, y=y, color=d$.cluster))
varImpPlot(model)
setwd("/Users/dphnrome/Documents/Git/rmR/")
setwd("C:/Users/dhadley/Documents/GitHub/rmR")
library(lubridate)
library(tidyr)
library(dplyr)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
library(randomForest)
nyc <- read.csv(url("https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
20000&descriptor=RAT%SIGHTING"))
nyc <- read.csv(url("https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
20000&descriptor=rat%sighting"))
nyc <- read.csv(url("https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
200))
nyc <- read.csv(url("https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
200"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
200"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
200&descriptor=rat%sighting"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
200&descriptor=Rat Sighting"))
#### NYC data ####
Import data from Socrata
Using their api
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
20000&descriptor=Rat%20Sighting"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$limit=
%2020000&descriptor=Rat%20Sighting"))
d <- read.csv("./data/NYC.csv")
View(d)
tail(d)
nyc <- read.csv(url("https://data.cityofnewyork.us/resource/erm2-nwe9.csv?created_date>=2015-01-25T21:25:23&descriptor=Rat%20Sighting"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?created_date>=2015-01-25T21:25:23&descriptor=Rat%20Sighting"))
library(RCurl)
x <- getURL("https://data.cityofnewyork.us/resource/erm2-nwe9.csv?created_date>=2015-01-25T21:25:23&descriptor=Rat%20Sighting")
nyc <- read.csv(text = x)
View(nyc)
x <- getURL("https://data.cityofnewyork.us/resource/erm2-nwe9.csv
?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27")
nyc <- read.csv(text = x)
View(nyc)
x <- getURL("https://data.cityofnewyork.us/resource/erm2-nwe9.json?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27")
nyc <- read.csv(text = x)
x
x <- getURL("https://data.cityofnewyork.us/resource/erm2-nwe9.json?$where=descriptor='Rat Sighting'AND created_date > '2015-01-25'")
x <- getURL("https://data.cityofnewyork.us/resource/erm2-nwe9.csv
?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-25%27")
nyc <- read.csv(text = x)
View(nyc)
x <- getURL("https://data.cityofnewyork.us/resource/erm2-nwe9.json?$where=descriptor='Rat Sighting'AND created_date > '2015-01-20'")
nyc <- read.csv(text = x)
View(nyc)
nyc <- read.csv(url(https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27))
nyc <- read.csv(url("https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv
?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv
?$where=descriptor=%27Rat%20Sighting%27
AND%20created_date%20%3E%20%272015-01-23%27"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27"))
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27"))
View(nyc)
View(nyc)
setwd("/Users/dphnrome/Documents/Git/rmR/")
setwd("C:/Users/dhadley/Documents/GitHub/rmR")
library(lubridate)
library(tidyr)
library(dplyr)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
library(randomForest)
library(RCurl)
# Plain Text:
# https://data.cityofnewyork.us/resource/erm2-nwe9.json?$where=descriptor='Rat Sighting'AND created_date > '2015-01-20'
# As URL (read.csv) can't do https, just http
#https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27
nyc <- read.csv(url("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27"))
View(nyc)
d <- nyc
# Dot map centered on Boston
map.center <- geocode("NYC, NY")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Latitude, y=Longitude))
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude))
# Dot map centered on Boston
map.center <- geocode("NYC, NY")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 11, color='bw')
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude))
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 10, alpha = .7, bins = 26, color="red",)
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 7, alpha = .7, bins = 26, color="red",)
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 5, alpha = .7, bins = 26, color="red",)
lastWeek <- today - 7
today <- Sys.Date()
lastWeek <- today - 7
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 5, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Percent of Votes for ",today,sep=""))
ggsave(paste("../ratmaps/images/posts/NYCMap",today,".png",sep=""), dpi=200, width=4, height=4)
# Dot map centered on Boston
map.center <- geocode("NYC, NY")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 11, color='bw')
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("1 Week of Rat Calls as of ",today,sep=""))
ggsave(paste("../ratmaps/images/posts/NYCMap",today,".png",sep=""), dpi=200, width=4, height=4)
api <- paste("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27
AND%20created_date%20%3E%20%27", lastWeek, "%27", sep="")
api
nyc <- read.csv(url(api))
setwd("/Users/dphnrome/Documents/Git/rmR/")
setwd("C:/Users/dhadley/Documents/GitHub/rmR")
library(lubridate)
library(tidyr)
library(dplyr)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
library(randomForest)
library(RCurl)
today <- Sys.Date()
lastWeek <- today - 7
## Plain Text:
# https://data.cityofnewyork.us/resource/erm2-nwe9.json?$where=descriptor='Rat Sighting'AND created_date > '2015-01-20'
## As URL (read.csv) can't do https, just http
#https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27
api <- paste("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27
AND%20created_date%20%3E%20%27", lastWeek, "%27", sep="")
api
nyc <- read.csv(url(api))
nyc <- read.csv(url(as.character(api)))
as.character(api)
nyc <- read.csv(url(as.character(api)))
setwd("/Users/dphnrome/Documents/Git/rmR/")
# setwd("C:/Users/dhadley/Documents/GitHub/rmR")
library(ggmap)
today <- Sys.Date()
lastWeek <- today - 7
todayText <- format(today, "%b %d")
lastWeekText <- format(lastWeek, "%b %d")
Year <- format(today, "%Y")
## Plain Text:
# https://data.cityofnewyork.us/resource/erm2-nwe9.json?$where=descriptor='Rat Sighting'AND created_date > '2015-01-20'
## As URL (read.csv) can't do https, just http
#https://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%272015-01-20%27
api <- paste("http://data.cityofnewyork.us/resource/erm2-nwe9.csv?$where=descriptor=%27Rat%20Sighting%27AND%20created_date%20%3E%20%27", lastWeek, "%27", sep="")
nyc <- read.csv(url(api))
d <- nyc
# Dot map
map.center <- geocode("New York City, NY")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 11, color='bw')
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep=""))
# Dot map
map.center <- geocode("New York City, NY")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 11, color='bw')
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-50))
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-20))
map.center <- geocode("New York City, NY")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 11, color='bw')
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-20)
)
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-30))
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-35))
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-40))
ggsave(paste("/Users/dphnrome/Google Drive/NYC_Rat_Map_",today,".png",sep=""), dpi=200, width=4, height=4)
ggsave(paste("/Users/dphnrome/Google Drive/NYC_Rat_Map_",today,".png",sep=""), dpi=200, width=4, height=4)
ggsave(paste("/Users/dphnrome/Google Drive/NYC_Rat_Map_",today,".png",sep=""), dpi=200, width=4, height=4)
ggsave(paste("/Users/dphnrome/Desktop/NYC_Rat_Map_",today,".png",sep=""), dpi=200, width=4, height=4)
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-36))
SHmap + geom_point(data=d, aes(y=Latitude, x=Longitude), size = 2, alpha = .7, bins = 26, color="red",) +
ggtitle(paste("Rat Calls: ", lastWeekText, " to ", todayText, ", ", Year, sep="")) +
theme(plot.title=element_text(vjust=-37))
ggsave(paste("/Users/dphnrome/Desktop/NYC_Rat_Map_",today,".png",sep=""), dpi=200, width=4, height=4)
x <- 3
x
print 3
print(3)
setwd("/Users/dphnrome/Documents/Git/rmR/")
# setwd("C:/Users/dhadley/Documents/GitHub/rmR")
library(ggmap)
today <- Sys.Date()
lastWeek <- today - 7
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep="")
cat("---\n")
cat("layout: post\n")
cat("title: NYC Weekly", today, "\n")
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_"today,".png\n")
# Stop writing to the file
sink()
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep="")
sink("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep="")
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
cat("title: NYC Weekly", today, "\n")
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_"today,".png\n")
# Stop writing to the file
sink()
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
cat("title: NYC Weekly", today, "\n")
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
# Stop writing to the file
sink()
today
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
cat("title: NYC Weekly", today, "\n")
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
# Stop writing to the file
sink()
cat(today)
cat(as.date(today))
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
cat("title: NYC Weekly")
today
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
as.character(today)
today
today
today <- Sys.Date()
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
cat("title: NYC Weekly")
print(today)
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
# Stop writing to the file
sink()
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
paste("title: NYC Weekly", today)
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
# Stop writing to the file
sink()
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
paste(as.symbol("title: NYC Weekly", today))
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
# Stop writing to the file
sink()
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
paste("title: NYC Weekly", as.symbol(today))
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
# Stop writing to the file
sink()
# Start writing to an output file
sink(paste("/Users/dphnrome/Documents/Git/ratmaps/_posts/test-", today,".md",sep=""))
cat("---\n")
cat("layout: post\n")
cat("title: NYC Weekly", today, "\n")
cat("tags: NYC weekly\n")
cat("---\n")
cat("![_config.yml](http://googledrive.com/host/0BxOPuM_gK7bqUW85bjZUd1UwTGs/posts/NYC_Rat_Map_",today,".png\n")
# Stop writing to the file
sink()
cat(sprintf(today))
today
today
today <- Sys.Date()
today <- Sys.Date()
today
today <- Sys.Date()
today
today
ls
capabilities()
