hottestHoodData <- d %>%
filter(cluster == topCluster)
# Dot map of hottest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=hottestHoodData, aes(x=LONGITUDE, y=LATITUDE, color="red"))
View(hotHoods)
View(hotHoods)
# setwd("/Users/dphnrome/Documents/Git/rmR/")
setwd("C:/Users/dhadley/Documents/GitHub/rmR")
# setwd("/home/pi/Github/rmR")
library(dplyr)
library(tidyr)
library(lubridate)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
set.seed(311)
#### Chicago ####
chi <- read.csv("./data/Chicago_rats.csv")
# Get dates ready
d <- chi %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date),
YearDay = yday(date))
## K-means ##
# This is how we group sightings on a map.
# NAs throw off clustering
# http://stackoverflow.com/questions/11254524/omit-rows-containing-specific-column-of-na
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
d <-  completeFun(d, "Latitude")
# Now ready
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(50)
# Add cluster variable back to the data frame
c <- augment(clust, d) %>% select(.cluster)
d <- merge(d, c, by='row.names')
d <- d  %>% tbl_df() %>% mutate(cluster = .cluster) #the ."var name" throws off some functions
remove(c)
## Use maps to inspect the clusters ##
# Dot map
map.center <- geocode("Chicago, Il")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Longitude, y=Latitude, color=d$cluster))
## Once you are happy with the clusters, see which one grew the most
lastDay <- yday(max(d$date)) # For setting up year-to-date
hotHoods <- d %>%
filter(YearDay <= lastDay) %>% # Get it down to the year to date
group_by(year, cluster) %>%
summarise(calls = n()) %>%
spread(year, calls)
hotHoods$Avg <- rowMeans(hotHoods[,c("2012", "2013", "2014")], na.rm=TRUE)
hotHoods$PerChng <- ((hotHoods$"2015" - hotHoods$Avg)) / hotHoods$Avg
topCluster <- subset(hotHoods, PerChng == max(PerChng))
topCluster <- topCluster$cluster
# Reverse geocode
hottestHood <- as.numeric(clust$centers[topCluster,])
hottestHood <- rev(hottestHood)
res <- revgeocode(hottestHood, output="more")
hottestHoodData <- d %>%
filter(cluster == topCluster)
# Dot map of hottest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=hottestHoodData, aes(x=Longitude, y=Latitude, color="red"))
# setwd("/Users/dphnrome/Documents/Git/rmR/")
setwd("C:/Users/dhadley/Documents/GitHub/rmR")
# setwd("/home/pi/Github/rmR")
library(dplyr)
library(tidyr)
library(lubridate)
library(broom) # augments d with model variables
library(ggplot2)
library(ggmap)
set.seed(311)
#### Chicago ####
chi <- read.csv("./data/Chicago_rats.csv")
# Get dates ready
d <- chi %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date),
YearDay = yday(date))
yday(Sys.Date())
yday(Sys.Date()) - 365
365 - yday(Sys.Date())
max(d$date)
lastDate <- max(d$date)
YearAgo <- lastDate - 365
YearAgo
YearAgo - 365
lastDate <- max(d$date)
YearAgo <- lastDate - 365
TwoYearsAgo <- YearAgo - 365
ThreeYearsAgo <- TwoYearsAgo - 365
d$period <- ifelse((d$date >= YearAgo), "TrailingYear",
ifelse(d$date >= TwoYearsAgo & d$date < YearAgo), "PrevPer1", "test")
d$period <- ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1", "test"))
View(d)
d$period <- ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
lastDate <- max(d$date)
YearAgo <- lastDate - 365
TwoYearsAgo <- YearAgo - 365
ThreeYearsAgo <- TwoYearsAgo - 365
FourYearsAgo <- ThreeYearsAgo - 365
d$period <- ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
d$period <-
ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
d$period <-
ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
d <- chi %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date),
YearDay = yday(date))
# Trailing 365 - a better comparison than YTD when it's early in the year
lastDate <- max(d$date)
YearAgo <- lastDate - 365
TwoYearsAgo <- YearAgo - 365
ThreeYearsAgo <- TwoYearsAgo - 365
FourYearsAgo <- ThreeYearsAgo - 365
d$period <-
ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
## K-means ##
# This is how we group sightings on a map.
# NAs throw off clustering
# http://stackoverflow.com/questions/11254524/omit-rows-containing-specific-column-of-na
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
d <-  completeFun(d, "Latitude")
# Now ready
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(50)
# Add cluster variable back to the data frame
c <- augment(clust, d) %>% select(.cluster)
d <- merge(d, c, by='row.names')
d <- d  %>% tbl_df() %>% mutate(cluster = .cluster) #the ."var name" throws off some functions
remove(c)
## Use maps to inspect the clusters ##
# Dot map
map.center <- geocode("Chicago, Il")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Longitude, y=Latitude, color=d$cluster))
## Once you are happy with the clusters, see which one grew the most
lastDay <- yday(max(d$date)) # For setting up year-to-date
hotHoods <- d %>%
group_by(period, cluster) %>%
summarise(calls = n()) %>%
spread(period, calls)
View(hotHoods)
View(hotHoods)
hotHoods$Avg <- rowMeans(hotHoods[,c("PrevPer1", "PrevPer2", "PrevPer3")], na.rm=TRUE)
hotHoods$PerChng <- ((hotHoods$TrailingYear - hotHoods$Avg)) / hotHoods$Avg
topCluster <- subset(hotHoods, PerChng == max(PerChng))
topCluster <- topCluster$cluster
# Reverse geocode
hottestHood <- as.numeric(clust$centers[topCluster,])
hottestHood <- rev(hottestHood)
res <- revgeocode(hottestHood, output="more")
hottestHoodData <- d %>%
filter(cluster == topCluster)
# Dot map of hottest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=hottestHoodData, aes(x=Longitude, y=Latitude, color="red"))
View(res)
View(hotHoods)
topCluster
hotHoods$Avg <- rowMeans(hotHoods[,c("PrevPer1", "PrevPer2", "PrevPer3")], na.rm=TRUE)
hotHoods$PerChng <- ((hotHoods$TrailingYear - hotHoods$Avg)) / hotHoods$Avg
topCluster <- subset(hotHoods, PerChng == min(PerChng))
topCluster <- topCluster$cluster
# Reverse geocode
hottestHood <- as.numeric(clust$centers[topCluster,])
hottestHood <- rev(hottestHood)
res <- revgeocode(hottestHood, output="more")
hottestHoodData <- d %>%
filter(cluster == topCluster)
# Dot map of hottest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=hottestHoodData, aes(x=Longitude, y=Latitude, color="red"))
topCluster
#### Boston ####
bos <- read.csv("./data/Boston_rats.csv")
# Get dates ready & make data look like Chicago's
d <- bos %>%
mutate(date = as.Date(OPEN_DT, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date),
YearDay = yday(date),
Latitude = LATITUDE,
Longitude = LONGITUDE)
# Trailing 365 - a better comparison than YTD when it's early in the year
lastDate <- max(d$date)
YearAgo <- lastDate - 365
TwoYearsAgo <- YearAgo - 365
ThreeYearsAgo <- TwoYearsAgo - 365
FourYearsAgo <- ThreeYearsAgo - 365
d$period <-
ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
## K-means ##
# This is how we group sightings on a map.
# NAs throw off clustering
# http://stackoverflow.com/questions/11254524/omit-rows-containing-specific-column-of-na
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
d <-  completeFun(d, "Latitude")
# Now ready
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(50)
# Add cluster variable back to the data frame
c <- augment(clust, d) %>% select(.cluster)
d <- merge(d, c, by='row.names')
d <- d  %>% tbl_df() %>% mutate(cluster = .cluster) #the ."var name" throws off some functions
remove(c)
## Use maps to inspect the clusters ##
# Dot map
map.center <- geocode("Boston, MA")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Longitude, y=Latitude, color=d$cluster))
## Once you are happy with the clusters, see which one grew the most
hotHoods <- d %>%
group_by(period, cluster) %>%
summarise(calls = n()) %>%
spread(period, calls)
hotHoods$Avg <- rowMeans(hotHoods[,c("PrevPer1", "PrevPer2", "PrevPer3")], na.rm=TRUE)
hotHoods$PerChng <- ((hotHoods$TrailingYear - hotHoods$Avg)) / hotHoods$Avg
topCluster <- subset(hotHoods, PerChng == max(PerChng))
topCluster <- topCluster$cluster
# Reverse geocode
hottestHood <- as.numeric(clust$centers[topCluster,])
hottestHood <- rev(hottestHood)
res <- revgeocode(hottestHood, output="more")
hottestHoodData <- d %>%
filter(cluster == topCluster)
# Dot map of hottest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=hottestHoodData, aes(x=Longitude, y=Latitude, color="red"))
## Coldest - e.g. largest decrease
bottomCluster <- subset(hotHoods, PerChng == min(PerChng))
bottomCluster <- bottomCluster$cluster
# Reverse geocode
coldestHood <- as.numeric(clust$centers[bottomCluster,])
coldestHood <- rev(coldestHood)
res <- revgeocode(coldestHood, output="more")
coldestHoodData <- d %>%
filter(cluster == bottomCluster)
# Dot map of coldest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=coldestHoodData, aes(x=Longitude, y=Latitude, color="red"))
#### Boston ####
bos <- read.csv("./data/Boston_rats.csv")
# Get dates ready & make data look like Chicago's
d <- bos %>%
mutate(date = as.Date(OPEN_DT, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date),
YearDay = yday(date),
Latitude = LATITUDE,
Longitude = LONGITUDE)
# Trailing 365 - a better comparison than YTD when it's early in the year
lastDate <- max(d$date)
YearAgo <- lastDate - 365
TwoYearsAgo <- YearAgo - 365
ThreeYearsAgo <- TwoYearsAgo - 365
FourYearsAgo <- ThreeYearsAgo - 365
d$period <-
ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
## K-means ##
# This is how we group sightings on a map.
# NAs throw off clustering
# http://stackoverflow.com/questions/11254524/omit-rows-containing-specific-column-of-na
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
d <-  completeFun(d, "Latitude")
# Now ready
clust <- d %>%
ungroup %>% dplyr::select(Latitude, Longitude) %>% kmeans(12)
# Add cluster variable back to the data frame
c <- augment(clust, d) %>% select(.cluster)
d <- merge(d, c, by='row.names')
d <- d  %>% tbl_df() %>% mutate(cluster = .cluster) #the ."var name" throws off some functions
remove(c)
## Use maps to inspect the clusters ##
# Dot map
map.center <- geocode("Boston, MA")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Longitude, y=Latitude, color=d$cluster))
## Once you are happy with the clusters, see which one grew the most
hotHoods <- d %>%
group_by(period, cluster) %>%
summarise(calls = n()) %>%
spread(period, calls)
hotHoods$Avg <- rowMeans(hotHoods[,c("PrevPer1", "PrevPer2", "PrevPer3")], na.rm=TRUE)
hotHoods$PerChng <- ((hotHoods$TrailingYear - hotHoods$Avg)) / hotHoods$Avg
topCluster <- subset(hotHoods, PerChng == max(PerChng))
topCluster <- topCluster$cluster
# Reverse geocode
hottestHood <- as.numeric(clust$centers[topCluster,])
hottestHood <- rev(hottestHood)
res <- revgeocode(hottestHood, output="more")
hottestHoodData <- d %>%
filter(cluster == topCluster)
# Dot map of hottest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=hottestHoodData, aes(x=Longitude, y=Latitude, color="red"))
## Coldest - e.g. largest decrease
bottomCluster <- subset(hotHoods, PerChng == min(PerChng))
bottomCluster <- bottomCluster$cluster
# Reverse geocode
coldestHood <- as.numeric(clust$centers[bottomCluster,])
coldestHood <- rev(coldestHood)
res <- revgeocode(coldestHood, output="more")
coldestHoodData <- d %>%
filter(cluster == bottomCluster)
# Dot map of coldest hood
map.center <- geocode(as.character(res$address))
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 14, color='bw')
SHmap + geom_point(data=coldestHoodData, aes(x=Longitude, y=Latitude, color="red"))
View(hotHoods)
View(d)
View(coldestHoodData)
chi <- read.csv("./data/Chicago_rats.csv")
coldestHoodData$neighborhood
group_by(coldestHoodData$neighborhood)  %>% summarise(total = n())
table <- coldestHoodData  %>% group_by(neighborhood)  %>% summarise(total = n())
View(table)
View(chi)
nyc <- read.csv("./data/NYC_rats.csv")
View(nyc)
table <- nyc  %>% group_by(Community.Board)  %>%  summarise(total = n())
View(table)
sf <- read.csv("./data/SanFrancisco_rats.csv")
View(sf)
#### Chicago ####
chi <- read.csv("./data/Chicago_rats.csv")
View(chi)
Bal <- read.csv("./data/Baltimore_rats.csv")
View(Bal)
bos <- read.csv("./data/Boston_rats.csv")
View(bos)
d <- bos %>%
mutate(date = as.Date(OPEN_DT, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date),
YearDay = yday(date),
Latitude = LATITUDE,
Longitude = LONGITUDE)
test <- d %>%
group_by(Source, year) %>%
summarise(calls = n())
View(test)
test <- d %>%
group_by(neighborhood, year) %>%
summarise(calls = n()) %>%
spread(period, calls)
test <- d %>%
group_by(neighborhood, year) %>%
summarise(calls = n())
View(bos)
View(test)
test <- d %>%
group_by(neighborhood) %>%
summarise(calls = n())
View(test)
#### Chicago ####
chi <- read.csv("./data/Chicago_rats.csv")
# Get dates ready
d <- chi %>%
mutate(date = as.Date(Creation.Date, format="%m/%d/%Y")) %>%
mutate(week = week(date),
year = year(date),
YearDay = yday(date))
# Trailing 365 - a better comparison than YTD when it's early in the year
lastDate <- max(d$date)
YearAgo <- lastDate - 365
TwoYearsAgo <- YearAgo - 365
ThreeYearsAgo <- TwoYearsAgo - 365
FourYearsAgo <- ThreeYearsAgo - 365
d$period <-
ifelse((d$date >= YearAgo), "TrailingYear",
ifelse((d$date >= TwoYearsAgo) & (d$date < YearAgo), "PrevPer1",
ifelse((d$date >= ThreeYearsAgo) & (d$date < TwoYearsAgo), "PrevPer2",
ifelse((d$date >= FourYearsAgo) & (d$date < ThreeYearsAgo), "PrevPer3",
"LongAgo"))))
View(chi)
# Dot map
map.center <- geocode("Chicago, Il")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Longitude, y=Latitude, color=d$Community.Area  ))
# Dot map
map.center <- geocode("Chicago, Il")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Longitude, y=Latitude, color=as.factor(d$Community.Area)))
# Dot map
map.center <- geocode("Chicago, Il")
SHmap <- qmap(c(lon=map.center$lon, lat=map.center$lat), source="google", zoom = 12, color='bw')
SHmap + geom_point(data=d, aes(x=Longitude, y=Latitude, color=as.character(d$Community.Area)))
## Once you are happy with the clusters, see which one grew the most
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
spread(Community.Area, calls)
hotHoods$Avg <- rowMeans(hotHoods[,c("PrevPer1", "PrevPer2", "PrevPer3")], na.rm=TRUE)
hotHoods$PerChng <- ((hotHoods$TrailingYear - hotHoods$Avg)) / hotHoods$Avg
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
spread(Community.Area, calls)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n())
View(hotHoods)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
spread(Community.Area, calls)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
spread(as.character(Community.Area), calls)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n())
View(hotHoods)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
spread(Community.Area, calls)
View(hotHoods)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
spread(Community.Area, calls, na.rm=TRUE)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
filter(Community.Area != "NA")
View(hotHoods)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
filter(Community.Area != "NA") %>%
spread(Community.Area, calls)
View(hotHoods)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
filter(Community.Area != "NA") %>%
spread(calls, Community.Area)
hotHoods <- d %>%
group_by(period, Community.Area) %>%
summarise(calls = n()) %>%
filter(Community.Area != "NA") %>%
spread(period, calls)
View(hotHoods)
hotHoods$Avg <- rowMeans(hotHoods[,c("PrevPer1", "PrevPer2", "PrevPer3")], na.rm=TRUE)
hotHoods$PerChng <- ((hotHoods$TrailingYear - hotHoods$Avg)) / hotHoods$Avg
View(hotHoods)
topCluster <- subset(hotHoods, PerChng == max(PerChng))
View(topCluster)
bottomNeighborhood <- subset(hotHoods, PerChng == min(PerChng))
View(bottomNeighborhood)
coldestHoodData <- d %>%
filter(Community.Area == bottomNeighborhood$Community.Area)
View(hotHoods)
View(coldestHoodData)
View(hotHoods)
View(hotHoods)
